# app.py
from flask import Flask, render_template, request, redirect, url_for
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from io import BytesIO
import base64

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/process', methods=['POST'])
def process_data():
    # Load customer input data from the form
    data = request.form.to_dict()
    features = [float(data['feature1']), float(data['feature2'])]  # Add more features as needed

    # Load the existing customer data
    existing_data = pd.read_csv('customer_data.csv')  # Replace with your actual dataset

    # Combine existing data and new input for clustering
    all_data = existing_data.append(pd.Series(features, index=existing_data.columns), ignore_index=True)

    # Perform K-Means clustering
    n_clusters = 3  # Number of clusters
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    all_data['cluster'] = kmeans.fit_predict(all_data)

    # Separate new input from existing data
    new_data = all_data.iloc[-1]
    existing_data = all_data.iloc[:-1]

    # Visualize clusters
    plt.scatter(existing_data['feature1'], existing_data['feature2'], c=existing_data['cluster'], cmap='viridis')
    plt.scatter(new_data['feature1'], new_data['feature2'], marker='x', s=200, c='red', label='New Customer')
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.title('Customer Segmentation')
    plt.legend()
    
    # Save plot to a BytesIO object for displaying in HTML
    img_data = BytesIO()
    plt.savefig(img_data, format='png')
    img_data.seek(0)
    plot_url = base64.b64encode(img_data.getvalue()).decode()

    return render_template('result.html', plot_url=plot_url, cluster=new_data['cluster'])

if __name__ == '__main__':
    app.run(debug=True)
