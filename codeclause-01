import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Sample data
data = {
    'feature1': [2, 5, 7, 9, 11],
    'feature2': [10, 8, 6, 4, 2],
    'feature3': [0.5, 1.0, 1.5, 2.0, 2.5],
    'lifetime_value': [100, 150, 200, 250, 300]
}

df = pd.DataFrame(data)

# Extract features (X) and target variable (y)
X = df[['feature1', 'feature2', 'feature3']]
y = df['lifetime_value']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Visualize actual vs predicted values
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Lifetime Value')
plt.ylabel('Predicted Lifetime Value')
plt.title('Actual vs Predicted Lifetime Value')
plt.show()

# Make predictions for new data
new_customer_data = pd.DataFrame({'feature1': [8], 'feature2': [5], 'feature3': [1.2]})
predicted_lifetime_value = model.predict(new_customer_data)
print(f'Predicted Lifetime Value for the new customer: {predicted_lifetime_value[0]}')

